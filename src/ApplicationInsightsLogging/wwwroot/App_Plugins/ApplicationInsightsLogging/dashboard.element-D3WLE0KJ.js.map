{"version":3,"file":"dashboard.element-D3WLE0KJ.js","sources":["../../../Client/src/dashboards/dashboard.element.ts"],"sourcesContent":["import { LitElement, css, html, customElement, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { ApplicationInsightsLoggingService, UserModel } from \"../api\";\r\nimport { UUIButtonElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationContext } from \"@umbraco-cms/backoffice/notification\";\r\nimport { UMB_CURRENT_USER_CONTEXT, UmbCurrentUserModel } from \"@umbraco-cms/backoffice/current-user\";\r\n\r\n@customElement('example-dashboard')\r\nexport class ExampleDashboardElement extends UmbElementMixin(LitElement) {\r\n\r\n  @state()\r\n  private _yourName: string | undefined = \"Press the button!\";\r\n\r\n  @state()\r\n  private _timeFromMrWolf: Date | undefined;\r\n\r\n  @state()\r\n  private _serverUserData: UserModel | undefined = undefined;\r\n\r\n  @state()\r\n  private _contextCurrentUser: UmbCurrentUserModel | undefined = undefined;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n      this.#notificationContext = notificationContext;\r\n    });\r\n\r\n    this.consumeContext(UMB_CURRENT_USER_CONTEXT, (currentUserContext) => {\r\n\r\n      // When we have the current user context\r\n      // We can observe properties from it, such as the current user or perhaps just individual properties\r\n      // When the currentUser object changes we will get notified and can reset the @state properrty\r\n      this.observe(currentUserContext.currentUser, (currentUser) => {\r\n        this._contextCurrentUser = currentUser;\r\n      });\r\n    });\r\n  }\r\n\r\n  #notificationContext: UmbNotificationContext | undefined = undefined;\r\n\r\n  #onClickWhoAmI = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await ApplicationInsightsLoggingService.whoAmI();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      this._serverUserData = data;\r\n      buttonElement.state = \"success\";\r\n    }\r\n\r\n    if (this.#notificationContext) {\r\n      this.#notificationContext.peek(\"warning\", {\r\n        data: {\r\n          headline: `You are ${this._serverUserData?.name}`,\r\n          message: `Your email is ${this._serverUserData?.email}`,\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  #onClickWhatsTheTimeMrWolf = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    // Getting a string - should I expect a datetime?!\r\n    const { data, error } = await ApplicationInsightsLoggingService.whatsTheTimeMrWolf();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    if (data !== undefined) {\r\n      this._timeFromMrWolf = new Date(data);\r\n      buttonElement.state = \"success\";\r\n    }\r\n  }\r\n\r\n  #onClickWhatsMyName = async (ev: Event) => {\r\n    const buttonElement = ev.target as UUIButtonElement;\r\n    buttonElement.state = \"waiting\";\r\n\r\n    const { data, error } = await ApplicationInsightsLoggingService.whatsMyName();\r\n\r\n    if (error) {\r\n      buttonElement.state = \"failed\";\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    this._yourName = data;\r\n    buttonElement.state = \"success\";\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n        <uui-box headline=\"Who am I?\">\r\n            <div slot=\"header\">[Server]</div>\r\n            <h2><uui-icon name=\"icon-user\"></uui-icon>${this._serverUserData?.email ? this._serverUserData.email : 'Press the button!'}</h2>\r\n            <ul>\r\n                ${this._serverUserData?.groups.map(group => html`<li>${group.name}</li>`)}\r\n            </ul>\r\n            <uui-button color=\"default\" look=\"primary\" @click=\"${this.#onClickWhoAmI}\">\r\n                Who am I?\r\n            </uui-button>\r\n            <p>This endpoint gets your current user from the server and displays your email and list of user groups.\r\n            It also displays a Notification with your details.</p>\r\n        </uui-box>\r\n\r\n        <uui-box headline=\"What's my Name?\">\r\n            <div slot=\"header\">[Server]</div>\r\n            <h2><uui-icon name=\"icon-user\"></uui-icon> ${this._yourName }</h2>\r\n            <uui-button color=\"default\" look=\"primary\" @click=\"${this.#onClickWhatsMyName}\">\r\n                Whats my name?\r\n            </uui-button>\r\n            <p>This endpoint has a forced delay to show the button 'waiting' state for a few seconds before completing the request.</p>\r\n        </uui-box>\r\n\r\n        <uui-box headline=\"What's the Time?\">\r\n            <div slot=\"header\">[Server]</div>\r\n            <h2><uui-icon name=\"icon-alarm-clock\"></uui-icon> ${this._timeFromMrWolf ? this._timeFromMrWolf.toLocaleString() : 'Press the button!'}</h2>\r\n            <uui-button color=\"default\" look=\"primary\" @click=\"${this.#onClickWhatsTheTimeMrWolf}\">\r\n                Whats the time Mr Wolf?\r\n            </uui-button>\r\n            <p>This endpoint gets the current date and time from the server.</p>\r\n        </uui-box>\r\n\r\n        <uui-box headline=\"Who am I?\" class=\"wide\">\r\n          <div slot=\"header\">[Context]</div>\r\n          <p>Current user email: <b>${this._contextCurrentUser?.email}</b></p>\r\n          <p>This is the JSON object available by consuming the 'UMB_CURRENT_USER_CONTEXT' context:</p>\r\n          <umb-code-block language=\"json\" copy>${JSON.stringify(this._contextCurrentUser, null, 2)}</umb-code-block>\r\n        </uui-box>\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n            :host {\r\n                display: grid;\r\n                gap: var(--uui-size-layout-1);\r\n                padding: var(--uui-size-layout-1);\r\n                grid-template-columns: 1fr 1fr 1fr;\r\n            }\r\n\r\n            uui-box {\r\n                margin-bottom: var(--uui-size-layout-1);\r\n            }\r\n\r\n            h2 {\r\n                margin-top:0;\r\n            }\r\n\r\n            .wide {\r\n                grid-column: span 3;\r\n            }\r\n    `];\r\n}\r\n\r\nexport default ExampleDashboardElement;\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'example-dashboard': ExampleDashboardElement;\r\n  }\r\n}\r\n"],"names":["_notificationContext","_onClickWhoAmI","_onClickWhatsTheTimeMrWolf","_onClickWhatsMyName","ExampleDashboardElement","UmbElementMixin","LitElement","__privateAdd","ev","buttonElement","data","error","ApplicationInsightsLoggingService","__privateGet","_a","_b","UMB_NOTIFICATION_CONTEXT","notificationContext","__privateSet","UMB_CURRENT_USER_CONTEXT","currentUserContext","currentUser","html","group","_c","css","__decorateClass","state","customElement","ExampleDashboardElement$1"],"mappings":"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"}